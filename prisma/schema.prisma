// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(uuid()) @db.Uuid
  username       String  @unique
  imageUrl       String  @db.Text
  externalUserId String  @unique
  bio            String? @db.Text

  following  Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  blocking  Block[] @relation("Blocking")
  guestBlocking GuestBlock[] @relation("GuestBlocking")
  blockedBy Block[] @relation("BlockedBy")

  stream Stream[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id           String  @id @default(uuid()) @db.Uuid
  name         String  @db.Text
  thumbnailUrl String? @db.Text

  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelayed       Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  userId String   @unique @db.Uuid
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
}

model Follow {
  id          String @id @default(uuid()) @db.Uuid
  followerId  String   @unique @db.Uuid
  followingId String   @unique @db.Uuid

  follower  User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String   @id @default(uuid()) @db.Uuid
  blockerId String   @unique @db.Uuid
  blockedId String   @unique @db.Uuid

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model GuestBlock {
  id         String   @id @default(uuid())  @db.Uuid
  hostId     String   @unique @db.Uuid // Who is blocking
  guestId    String   @db.Uuid // guest identity from cookie
  createdAt  DateTime @default(now())
  blocker User @relation(name: "GuestBlocking", fields: [hostId], references: [id], onDelete: Cascade)
  
  @@unique([hostId, guestId])
  @@index([hostId])
  @@index([guestId])
}